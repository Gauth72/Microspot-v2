generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  profileImage  ProfileImage?
  coverImage    CoverImage?
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  favorites     Favorite[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications    Notification[]
  userType      UserType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  displayName   String?   // Nom affiché publiquement
  bio           String?   // Courte description
  phoneNumber   String?   // Numéro de téléphone (privé)
  emailNotifications Boolean @default(true) // Préférence pour les notifications par email
}

enum SpaceType {
  INDOOR
  OUTDOOR
  MIXED
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  surface     Float
  price       Float
  address     String
  postalCode  String
  city        String
  latitude    Float?
  longitude   Float?
  spaceType   SpaceType
  is24_7      Boolean  @default(false)
  openingTime  String?
  closingTime  String?
  mainCategory MainCategory
  foodVendingType FoodVendingType?
  farmVendingType FarmVendingType?
  goodsVendingType GoodsVendingType?
  petVendingType PetVendingType?
  arcadeType ArcadeType?
  logisticsType LogisticsType?
  miscType MiscType?
  foodKioskType FoodKioskType?
  otherKioskType OtherKioskType?
  wellnessKioskType WellnessKioskType?
  status      ListingStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  messages    Message[]
  images      Image[]
  favorites   Favorite[]
  hasConcreteSlab Boolean @default(false)
  hasElectricity Boolean @default(false)
  hasWater      Boolean @default(false)
  internetType  String? // 'WIFI', 'RJ45', or null
}

model Image {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Message {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String
  listing     Listing  @relation(fields: [listingId], references: [id])
  listingId   String
}

enum UserType {
  USER
  OWNER
  PROFESSIONAL
}

enum MainCategory {
  VENDING_MACHINE
  KIOSK
  ARCADE
  LOGISTICS
  MISC
}

enum FoodVendingType {
  ALL                // Tout type de distributeur alimentaire
  PIZZA               // Distributeur de pizzas
  HOT_MEALS          // Distributeur de plats cuisinés / repas chauds
  SANDWICHES         // Distributeur de sandwiches
  SNACKS             // Distributeur de snacks / confiseries
  HOT_DRINKS         // Distributeur de boissons chaudes
  COLD_DRINKS        // Distributeur de boissons fraîches
  DAIRY              // Distributeur de lait / produits laitiers
  EGGS               // Distributeur d'œufs
  FRUITS_VEGETABLES  // Distributeur de fruits et légumes
  BREAD              // Distributeur de pain
  ICE_CREAM          // Distributeur de glaces / sorbets
  MATCHA             // Distributeur de Matcha
  CBD                // Distributeur de CBD
}

enum FarmVendingType {
  ALL            // Tout type de distributeur de produits fermiers
  ORGANIC         // Distributeur de produits bio
  FARM_PRODUCTS   // Distributeur de produits fermiers (mix)
  HONEY           // Distributeur de miel
  CHEESE          // Distributeur de fromage
  CHARCUTERIE     // Distributeur de charcuterie
  BULK_PRODUCTS   // Distributeur de produits en vrac
}

enum GoodsVendingType {
  ALL                // Tout type de distributeur de biens
  FLOWERS             // Distributeur de fleurs
  NEWSPAPERS          // Distributeur de journaux / magazines
  COSMETICS           // Distributeur de cosmétiques
  HYGIENE             // Distributeur de produits d'hygiène
  E_CIGARETTES        // Distributeur de cigarettes électroniques
  MEDICINE            // Distributeur de médicaments (parapharmacie)
  SANITARY_PROTECTION // Distributeur de protections hygiéniques
  OFFICE_SUPPLIES     // Distributeur de fournitures de bureau
  PHONE_ACCESSORIES   // Distributeur de petits accessoires téléphoniques
}

enum PetVendingType {
  ALL           // Tout type de distributeur pour animaux
  PET_FOOD      // Distributeur d'alimentation pour animaux
  PET_SUPPLIES  // Distributeur de produits pour animaux
}

enum ArcadeType {
  DARTS         // Fléchettes
  POOL          // Billard
  ARCADE_GAMES  // Jeux d'arcade
  PINBALL       // Flipper
  OTHER_GAMES   // Autres jeux
}

enum LogisticsType {
  PARCEL_LOCKER  // Locker / Casier colis
}

enum MiscType {
  HEATING_PELLETS  // Distributeur de granulés chauffage
  PHOTO_BOOTH     // Photomaton
  LOCKSMITH       // Distributeur de clé serrurier
}

enum FoodKioskType {
  ALL               // Tout type de kiosque alimentaire
  BURGER            // Kiosque à burgers
  WAFFLE            // Kiosque à gaufres
  FRIES             // Kiosque à frites
  KEBAB             // Kiosque à kebab
  SANDWICH          // Kiosque à sandwichs
  FRUITS_VEGETABLES // Kiosque primeur (fruits & légumes)
  CHEESE            // Kiosque fromager
  CHARCUTERIE       // Kiosque de charcuterie
}

enum OtherKioskType {
  ALL            // Tout type de kiosque
  FLORIST         // Kiosque fleuriste
  EXPRESS_REPAIR  // Kiosque réparation express
}

enum WellnessKioskType {
  ALL             // Tout type de kiosque bien-être
  HAIRDRESSER      // Kiosque coiffure / barbier
  NAIL_SALON       // Kiosque onglerie
  BEAUTICIAN       // Kiosque esthéticienne
  FACIAL_MASSAGE   // Kiosque soins du visage / massages
  TATTOO_PIERCING  // Kiosque tatoueur / pierceur
  PET_GROOMING     // Kiosque soins pour animaux (toilettage)
  SEWING           // Kiosque de couture
  DRY_CLEANING     // Kiosque pressing
}

enum ListingStatus {
  ACTIVE
  RENTED
  INACTIVE
}

model ProfileImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model CoverImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}
