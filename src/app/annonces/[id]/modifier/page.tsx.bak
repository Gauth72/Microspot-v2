'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { CldUploadWidget } from 'next-cloudinary';
import Image from 'next/image';
import { toast } from 'react-hot-toast';
import Link from 'next/link';

type SpaceType = 'INDOOR' | 'OUTDOOR' | 'MIXED';
type InternetType = 'wifi' | 'ethernet' | 'both' | null;

interface ImageType {
  id: string;
  url: string;
  publicId: string;
}

export default function ModifierAnnonce({ params }: { params: { id: string } }) {
  const router = useRouter();
  const { data: session } = useSession();
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  
  // Form state
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [surface, setSurface] = useState('');
  const [price, setPrice] = useState('');
  const [address, setAddress] = useState('');
  const [postalCode, setPostalCode] = useState('');
  const [city, setCity] = useState('');
  const [spaceType, setSpaceType] = useState<SpaceType>('INDOOR');
  const [hasConcreteSlab, setHasConcreteSlab] = useState(false);
  const [hasElectricity, setHasElectricity] = useState(false);
  const [hasWater, setHasWater] = useState(false);
  const [internetType, setInternetType] = useState<InternetType>(null);
  const [is24_7, setIs24_7] = useState(false);
  const [openingTime, setOpeningTime] = useState('09:00');
  const [closingTime, setClosingTime] = useState('18:00');
  const [images, setImages] = useState<ImageType[]>([]);

  // Fetch listing data
  useEffect(() => {
    const fetchListing = async () => {
      try {
        const response = await fetch(`/api/listings/${params.id}`);
        if (!response.ok) throw new Error('Failed to fetch listing');
        const data = await response.json();
        
        setTitle(data.title);
        setDescription(data.description);
        setSurface(data.surface.toString());
        setPrice(data.price.toString());
        setAddress(data.address);
        setPostalCode(data.postalCode);
        setCity(data.city);
        setSpaceType(data.spaceType);
        setHasConcreteSlab(data.hasConcreteSlab);
        setHasElectricity(data.hasElectricity);
        setHasWater(data.hasWater);
        setInternetType(data.internetType);
        setIs24_7(data.is24_7);
        setOpeningTime(data.openingTime || '09:00');
        setClosingTime(data.closingTime || '18:00');
        setImages(data.images);
      } catch (error) {
        console.error('Error fetching listing:', error);
        toast.error('Erreur lors du chargement de l\'annonce');
        router.push('/annonces');
      } finally {
        setLoading(false);
      }
    };

    if (params.id) fetchListing();
  }, [params.id, router]);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      // Validation des champs numériques
      const numericSurface = parseFloat(surface);
      const numericPrice = parseFloat(price);

      if (isNaN(numericSurface) || isNaN(numericPrice)) {
        throw new Error('La surface et le prix doivent être des nombres valides');
      }

      const formData = {
        title,
        description,
        surface: numericSurface,
        price: numericPrice,
        address,
        postalCode,
        city,
        spaceType,
        hasConcreteSlab,
        hasElectricity,
        hasWater,
        internetType,
        is24_7,
        openingTime: is24_7 ? null : openingTime,
        closingTime: is24_7 ? null : closingTime,
        images: images.map(img => ({
          id: img.id,
          url: img.url,
          publicId: img.publicId
        }))
      };

      const response = await fetch(`/api/listings/${params.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('Failed to update listing');
      }

      toast.success('Annonce modifiée avec succès');
      router.push(`/annonces/${params.id}`);
    } catch (error) {
      console.error('Error updating listing:', error);
      toast.error(error instanceof Error ? error.message : 'Erreur lors de la modification de l\'annonce');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-2xl font-bold mb-8">Modifier l'annonce</h1>
      
      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-600"></div>
        </div>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Section 1: Informations générales */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4 text-indigo-600">1. Informations générales</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-indigo-600">Titre</label>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-indigo-600">Description</label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  className="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  rows={4}
                  required
                />
              </div>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block font-medium">Surface (m²)</label>
            <input type="number" value={surface} onChange={(e) => setSurface(e.target.value)} className="input input-bordered w-full" required />
          </div>
          <div>
            <label className="block font-medium">Prix (€)</label>
            <input type="number" value={price} onChange={(e) => setPrice(e.target.value)} className="input input-bordered w-full" required />
          </div>
        </div>
        <div>
          <label className="block font-medium">Adresse</label>
          <input type="text" value={address} onChange={(e) => setAddress(e.target.value)} className="input input-bordered w-full" required />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <input type="text" placeholder="Code postal" value={postalCode} onChange={(e) => setPostalCode(e.target.value)} className="input input-bordered w-full" required />
          <input type="text" placeholder="Ville" value={city} onChange={(e) => setCity(e.target.value)} className="input input-bordered w-full" required />
        </div>
        <div>
          <label className="block font-medium">Type d'espace</label>
          <select value={spaceType} onChange={(e) => setSpaceType(e.target.value as SpaceType)} className="select select-bordered w-full">
            <option value="INDOOR">Intérieur</option>
            <option value="OUTDOOR">Extérieur</option>
            <option value="MIXED">Mixte</option>
          </select>
        </div>
        <div className="grid grid-cols-3 gap-4">
          <label className="flex items-center gap-2"><input type="checkbox" checked={hasConcreteSlab} onChange={(e) => setHasConcreteSlab(e.target.checked)} /> Dalle béton</label>
          <label className="flex items-center gap-2"><input type="checkbox" checked={hasElectricity} onChange={(e) => setHasElectricity(e.target.checked)} /> Électricité</label>
          <label className="flex items-center gap-2"><input type="checkbox" checked={hasWater} onChange={(e) => setHasWater(e.target.checked)} /> Eau</label>
        </div>
        <div>
          <label className="block font-medium">Connexion Internet</label>
          <select value={internetType || ''} onChange={(e) => setInternetType(e.target.value === '' ? null : (e.target.value as InternetType))} className="select select-bordered w-full">
            <option value="">Aucune</option>
            <option value="wifi">WiFi</option>
            <option value="ethernet">Ethernet</option>
            <option value="both">WiFi + Ethernet</option>
          </select>
        </div>
        <label className="flex items-center gap-2"><input type="checkbox" checked={is24_7} onChange={(e) => setIs24_7(e.target.checked)} /> Accès 24/7</label>
        {!is24_7 && (
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block font-medium">Heure d'ouverture</label>
              <input type="time" value={openingTime} onChange={(e) => setOpeningTime(e.target.value)} className="input input-bordered w-full" />
            </div>
            <div>
              <label className="block font-medium">Heure de fermeture</label>
              <input type="time" value={closingTime} onChange={(e) => setClosingTime(e.target.value)} className="input input-bordered w-full" />
            </div>
          </div>
        )}
        <div>
          <label className="block font-medium mb-2">Images</label>
          <CldUploadWidget uploadPreset="your_preset" onUpload={(result: any) => {
            const newImage = {
              id: crypto.randomUUID(),
              url: result.info.secure_url,
              publicId: result.info.public_id,
            };
            setImages([...images, newImage]);
          }}>
            {({ open }) => (
              <button type="button" onClick={() => open()} className="btn btn-primary">Ajouter une image</button>
            )}
          </CldUploadWidget>
          <div className="grid grid-cols-3 gap-4 mt-4">
            {images.map((img) => (
              <div key={img.id} className="relative">
                <Image src={img.url} alt="Uploaded" width={150} height={100} className="rounded" />
              </div>
            ))}
          </div>
        </div>
        <button type="submit" disabled={submitting} className="btn btn-success w-full">
          {submitting ? 'Enregistrement...' : 'Enregistrer les modifications'}
        </button>
      </form>
    </div>
  );
}

