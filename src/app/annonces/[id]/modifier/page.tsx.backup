'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { CldUploadWidget } from 'next-cloudinary';
import Image from 'next/image';
import { toast } from 'react-hot-toast';
import Link from 'next/link';

type SpaceType = 'INDOOR' | 'OUTDOOR' | 'MIXED';
type InternetType = 'wifi' | 'ethernet' | 'both' | null;

interface ImageType {
  id: string;
  url: string;
  publicId: string;
}

interface ListingData {
  id: string;
  title: string;
  description: string;
  surface: number;
  price: number;
  address: string;
  postalCode: string;
  city: string;
  spaceType: SpaceType;
  hasConcreteSlab: boolean;
  hasElectricity: boolean;
  hasWater: boolean;
  internetType: InternetType;
  is24_7: boolean;
  openingTime: string | null;
  closingTime: string | null;
  images: ImageType[];
}



export default function ModifierAnnonce({ params }: { params: { id: string } }) {
  const router = useRouter();
  const { data: session } = useSession();
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [surface, setSurface] = useState('');
  const [price, setPrice] = useState('');
  const [address, setAddress] = useState('');
  const [postalCode, setPostalCode] = useState('');
  const [city, setCity] = useState('');
  const [spaceType, setSpaceType] = useState<SpaceType>('INDOOR');
  const [hasConcreteSlab, setHasConcreteSlab] = useState(false);
  const [hasElectricity, setHasElectricity] = useState(false);
  const [hasWater, setHasWater] = useState(false);
  const [internetType, setInternetType] = useState<InternetType>(null);
  const [is24_7, setIs24_7] = useState(false);
  const [openingTime, setOpeningTime] = useState<string>('09:00');
  const [closingTime, setClosingTime] = useState<string>('18:00');
  const [images, setImages] = useState<ImageType[]>([]);

  useEffect(() => {
    const fetchListing = async () => {
      try {
        const response = await fetch(`/api/listings/${params.id}`);
        if (!response.ok) throw new Error('Failed to fetch listing');
        const data = await response.json();

        setTitle(data.title);
        setDescription(data.description);
        setSurface(data.surface.toString());
        setPrice(data.price.toString());
        setAddress(data.address);
        setPostalCode(data.postalCode);
        setCity(data.city);
        setSpaceType(data.spaceType as SpaceType);
        setHasConcreteSlab(data.hasConcreteSlab);
        setHasElectricity(data.hasElectricity);
        setHasWater(data.hasWater);
        setInternetType(data.internetType as InternetType);
        setIs24_7(data.is24_7);
        setOpeningTime(data.openingTime || '09:00');
        setClosingTime(data.closingTime || '18:00');
        setImages(data.images);
      } catch (error) {
        console.error('Error fetching listing:', error);
        toast.error('Erreur lors du chargement de l\'annonce');
        router.push('/annonces');
      } finally {
        setLoading(false);
      }
    };

    if (params.id) fetchListing();
  }, [params.id, router]);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      // Validation des champs numériques
      const numericSurface = parseFloat(surface);
      const numericPrice = parseFloat(price);

      if (isNaN(numericSurface) || isNaN(numericPrice)) {
        throw new Error('La surface et le prix doivent être des nombres valides');
      }

      const formData = {
        title,
        description,
        surface: numericSurface,
        price: numericPrice,
        address,
        postalCode,
        city,
        spaceType,
        hasConcreteSlab,
        hasElectricity,
        hasWater,
        internetType,
        is24_7,
        openingTime: is24_7 ? null : openingTime,
        closingTime: is24_7 ? null : closingTime,
        images: images.map(img => ({
          id: img.id,
          url: img.url,
          publicId: img.publicId
        }))
      };

      const response = await fetch(`/api/listings/${params.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('Failed to update listing');
      }

      toast.success('Annonce modifiée avec succès');
      router.push(`/annonces/${params.id}`);
    } catch (error) {
      console.error('Error updating listing:', error);
      toast.error(error instanceof Error ? error.message : 'Erreur lors de la modification de l\'annonce');
    } finally {
      setSubmitting(false);
    }
  };

  const handleImageUpload = async (result: any) => {
    const newImage = {
      id: result.info.public_id,
      url: result.info.secure_url,
      publicId: result.info.public_id
    };
    setImages(prev => [...prev, newImage]);
  };

  const removeImage = (publicId: string) => {
    setImages(prev => prev.filter(img => img.publicId !== publicId));
  };

  if (loading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-xl">Chargement...</div>
      </div>
    );
  }

  if (!session?.user) {
    router.push('/login');
    return null;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Modifier l'annonce</h1>
        <Link
          href={`/annonces/${params.id}`}
          className="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600"
        >
          Retour
        </Link>
      </div>
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Section 1: Informations générales */}
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold text-indigo-600 mb-4">1. Informations générales</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-indigo-600 mb-1">
                Titre de l'annonce
              </label>
              <input
                type="text"
                id="title"
                name="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                required
              />
            </div>

            <div>
              <label htmlFor="spaceType" className="block text-sm font-medium text-indigo-600 mb-1">
                Type d'espace
              </label>
              <select
                id="spaceType"
                value={spaceType}
                onChange={(e) => setSpaceType(e.target.value as SpaceType)}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
              >
                <option value="">Sélectionnez un type</option>
                <option value="INDOOR">Intérieur</option>
                <option value="OUTDOOR">Extérieur</option>
                <option value="MIXED">Mixte</option>
              </select>
            </div>

            <div className="col-span-2">
              <label htmlFor="description" className="block text-sm font-medium text-indigo-600 mb-1">
                Description
              </label>
              <textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={4}
                className="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                required
              />
            </div>

            <div>
              <label htmlFor="surface" className="block text-sm font-medium text-indigo-600 mb-1">
                Surface (m²)
              </label>
              <input
                type="number"
                id="surface"
                value={surface}
                onChange={(e) => setSurface(Number(e.target.value))}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                required
                min="0"
                step="0.01"
              />
            </div>

            <div>
              <label htmlFor="price" className="block text-sm font-medium text-indigo-600 mb-1">
                Loyer mensuel (€)
              </label>
              <input
                type="number"
                id="price"
                value={price}
                onChange={(e) => setPrice(Number(e.target.value))}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                required
                min="0"
                step="0.01"
              />
            </div>
          </div>
        </div>

        {/* Section 2: Localisation */}
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold text-indigo-600 mb-4">2. Localisation</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="md:col-span-2">
              <label htmlFor="address" className="block text-sm font-medium text-indigo-600 mb-1">
                Adresse
              </label>
              <input
                type="text"
                id="address"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                required
              />
            </div>

            <div>
              <label htmlFor="postalCode" className="block text-sm font-medium text-indigo-600 mb-1">
                Code postal
              </label>
              <input
                type="text"
                id="postalCode"
                value={postalCode}
                onChange={(e) => setPostalCode(e.target.value)}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                required
              />
            </div>

            <div>
              <label htmlFor="city" className="block text-sm font-medium text-indigo-600 mb-1">
                Ville
              </label>
              <input
                type="text"
                id="city"
                value={city}
                onChange={(e) => setCity(e.target.value)}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                required
              />
            </div>
          </div>
        </div>

        {/* Section 3: Équipements */}
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold text-indigo-600 mb-4">3. Équipements</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="flex items-center">
              <input
                type="checkbox"
                id="hasConcreteSlab"
                checked={hasConcreteSlab}
                onChange={(e) => setHasConcreteSlab(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="hasConcreteSlab" className="ml-2 text-sm text-gray-700">
                Dalle béton
              </label>
            </div>

            <div className="flex items-center">
              <input
                type="checkbox"
                id="hasElectricity"
                checked={hasElectricity}
                onChange={(e) => setHasElectricity(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="hasElectricity" className="ml-2 text-sm text-gray-700">
                Électricité
              </label>
            </div>

            <div className="flex items-center">
              <input
                type="checkbox"
                id="hasWater"
                checked={hasWater}
                onChange={(e) => setHasWater(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="hasWater" className="ml-2 text-sm text-gray-700">
                Eau
              </label>
            </div>

            <div>
              <label htmlFor="internetType" className="block text-sm font-medium text-indigo-600 mb-1">
                Type de connexion Internet
              </label>
              <select
                id="internetType"
                value={internetType || ''}
                onChange={(e) => setInternetType(e.target.value || null)}
                className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
              >
                <option value="">Aucune connexion</option>
                <option value="wifi">Wi-Fi</option>
                <option value="ethernet">Ethernet</option>
                <option value="both">Wi-Fi et Ethernet</option>
              </select>
            </div>
          </div>
        </div>

        {/* Section 4: Horaires d'accès */}
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold text-indigo-600 mb-4">4. Horaires d'accès</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="flex items-center">
              <input
                type="checkbox"
                id="is24_7"
                checked={is24_7}
                onChange={(e) => setIs24_7(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="is24_7" className="ml-2 text-sm text-gray-700">
                Accès 24/7
              </label>
            </div>

            {!is24_7 && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="openingTime" className="block text-sm font-medium text-indigo-600 mb-1">
                    Heure d'ouverture
                  </label>
                  <input
                    type="time"
                    id="openingTime"
                    value={openingTime}
                    onChange={(e) => setOpeningTime(e.target.value)}
                    className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                    required={!is24_7}
                  />
                </div>

                <div>
                  <label htmlFor="closingTime" className="block text-sm font-medium text-indigo-600 mb-1">
                    Heure de fermeture
                  </label>
                  <input
                    type="time"
                    id="closingTime"
                    value={closingTime}
                    onChange={(e) => setClosingTime(e.target.value)}
                    className="h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
                    required={!is24_7}
                  />
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Section 5: Photos */}
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold text-indigo-600 mb-4">5. Photos</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
            {images.map((image) => (
              <div key={image.id} className="relative aspect-square">
                <Image
                  src={image.url}
                  alt="Photo de l'annonce"
                  fill
                  className="rounded-lg object-cover"
                />
                <button
                  type="button"
                  onClick={() => {
                    setImages(images.filter((img) => img.id !== image.id));
                  }}
                  className="absolute -right-2 -top-2 rounded-full bg-red-500 p-1 text-white hover:bg-red-600"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-4 w-4"
                    viewBox="0 0 20 20"
                    fill="none"
                    stroke="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </button>
              </div>
            ))}
          </div>

          <div className="mt-4">
            <CldUploadWidget
              uploadPreset="microspot"
              onUpload={(result: any) => {
                if (result.info && 'secure_url' in result.info && 'public_id' in result.info) {
                  const newImage = {
                    url: result.info.secure_url as string,
                    publicId: result.info.public_id as string,
                    id: result.info.public_id as string
                  };
                  setImages([...images, newImage]);
                }
              }}
            >
              {({ open }) => (
                <button
                  type="button"
                  onClick={() => open()}
                  className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Ajouter des photos
                </button>
              )}
            </CldUploadWidget>
          </div>
        </div>

        {/* Bouton de soumission */}
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={submitting}
            className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:cursor-not-allowed disabled:opacity-50"
          >
            {submitting ? 'Enregistrement...' : 'Enregistrer les modifications'}
          </button>
        </div>
      </form>
    </div>
  );

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Section 1: Informations générales */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-indigo-600">
            1. Informations générales
          </h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Titre de l&apos;annonce
              </label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={4}
                className="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                required
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Surface (m²)
                </label>
                <input
                  type="number"
                  value={surface}
                  onChange={(e) => setSurface(e.target.value)}
                  className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  required
                  min="0"
                  step="0.01"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Loyer mensuel (€)
                </label>
                <input
                  type="number"
                  value={price}
                  onChange={(e) => setPrice(e.target.value)}
                  className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  required
                  min="0"
                  step="0.01"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Type d&apos;espace
              </label>
              <select
                value={spaceType}
                onChange={(e) => setSpaceType(e.target.value)}
                className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              >
                <option value="interieur">Intérieur</option>
                <option value="exterieur">Extérieur</option>
                <option value="mixte">Mixte</option>
              </select>
            </div>
          </div>
        </div>

        {/* Section 2: Localisation */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-indigo-600">2. Localisation</h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Adresse
              </label>
              <input
                type="text"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                required
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Code postal
                </label>
                <input
                  type="text"
                  value={postalCode}
                  onChange={(e) => setPostalCode(e.target.value)}
                  className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Ville
                </label>
                <input
                  type="text"
                  value={city}
                  onChange={(e) => setCity(e.target.value)}
                  className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  required
                />
              </div>
            </div>
          </div>
        </div>

        {/* Section 3: Équipements */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-indigo-600">
            3. Équipements
          </h2>
          <div className="space-y-4">
            <div className="flex items-center">
              <input
                type="checkbox"
                checked={hasConcreteSlab}
                onChange={(e) => setHasConcreteSlab(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label className="ml-2 block text-sm text-gray-700">
                Dalle béton
              </label>
            </div>
            <div className="flex items-center">
              <input
                type="checkbox"
                checked={hasElectricity}
                onChange={(e) => setHasElectricity(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label className="ml-2 block text-sm text-gray-700">
                Électricité
              </label>
            </div>
            <div className="flex items-center">
              <input
                type="checkbox"
                checked={hasWater}
                onChange={(e) => setHasWater(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label className="ml-2 block text-sm text-gray-700">
                Point d&apos;eau
              </label>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Internet
              </label>
              <select
                value={internetType}
                onChange={(e) => setInternetType(e.target.value)}
                className="mt-1 block w-full h-10 rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              >
                <option value="aucun">Aucun</option>
                <option value="fibre">Fibre</option>
                <option value="adsl">ADSL</option>
                <option value="4g">4G</option>
              </select>
            </div>
          </div>
        </div>

        {/* Section 4: Horaires d'accès */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-indigo-600">
            4. Horaires d&apos;accès
          </h2>
          <div className="space-y-4">
            <div className="flex items-center">
              <input
                type="checkbox"
                id="is24_7"
                checked={is24_7}
                onChange={(e) => setIs24_7(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="is24_7" className="ml-2 block text-sm text-gray-700">
                Accès 24/7
              </label>
            </div>

            {!is24_7 && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="openingTime" className="block text-sm font-medium text-gray-700">
                    Heure d'ouverture
                  </label>
                  <input
        </div>
      </div>
    )}
  </div>
</div>

{/* Section 5: Photos */}
<div className="bg-white p-6 rounded-lg shadow">
  <h2 className="text-xl font-semibold mb-4 text-indigo-600">5. Photos</h2>
  <div className="space-y-4">
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
      {images.map((image) => (
        <div
          key={image.id}
          className="relative aspect-square bg-gray-100 rounded-lg overflow-hidden"
        >
          <Image
            src={image.url}
            alt="Photo de l'annonce"
            fill
            className="object-cover"
          />
                    className="w-full h-full object-cover"
                  />
                  <button
                    type="button"
                    onClick={() => {
                      setImages(images.filter((img) => img.id !== image.id));
                    }}
                    className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full hover:bg-red-600"
                  >
                    <svg
                      className="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M6 18L18 6M6 6l12 12"
                      />
                    </svg>
                  </button>
                </div>
              ))}
            </div>
                Ajouter des photos
              </CldUploadButton>
            )}
            <p className="text-sm text-gray-500">
              Maximum 8 photos, format JPEG ou PNG
            </p>
          </div>
        </div>

        {/* Boutons d'action */}
        <div className="flex justify-end space-x-4">
          <Link
            href={`/annonces/${params.id}`}
            className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Annuler
          </Link>
          <button
            type="submit"
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Enregistrer les modifications
          </button>
        </div>
      </form>
    </div>
  );
}
